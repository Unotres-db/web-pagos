import React, { useState, useEffect } from 'react';
import useAxios from './useAxios';
import api from '../services/api';
import valuationsWebApi from '../services/valuationsWebApi';

export default function useTest () {
  const { response: data, axiosFetch: postForecastedFinancials } = useAxios();

  function forecastedSucessCallback(apiData) {
    console.log(apiData)
  }

  function saveValuation(companyData, assumptions, calculatedCostOfCapital, valuation, setValuationId,forecastedFinancialData, successCallback, errorCallback){ 
    const userId = "martincsl"; // colocar userId 
    const companyId = companyData.symbol;
    const { revenueGrowth, marginTarget, opexGrowth, interestGrowth, otherGrowth, taxRate, capexGrowth, nwcGrowth, perpetualGrowthRate, cashFlowDiscretePeriod, companyBeta, riskFreeReturn, marketReturn, debtTotalRatio, costOfDebt, published, publishedDate} = assumptions
    const { costOfEquity, costOfCapital} = calculatedCostOfCapital
    const { cashFlowAvgGrowth, sumOfCashFlowPresentValue, perpetuityValue, perpetuityPresentValue, enterpriseValue, cash, debt, equityValue, sharesOutstanding, targetStockPrice, marketCap } = valuation;

    // Note: Does not includes valuationId (that will be generated by the backend...)
    const valuationData = { userId, companyId, cashFlowAvgGrowth, sumOfCashFlowPresentValue, perpetuityValue, perpetuityPresentValue, enterpriseValue, cash, debt, equityValue, sharesOutstanding, targetStockPrice, marketCap, revenueGrowth, marginTarget, opexGrowth, interestGrowth, otherGrowth, taxRate, capexGrowth, nwcGrowth, perpetualGrowthRate, cashFlowDiscretePeriod, companyBeta, riskFreeReturn, marketReturn, debtTotalRatio, costOfDebt, costOfEquity, costOfCapital, published, publishedDate } ;

    let dataToProcess = []; 
    let forecastedData = {}
    api.post('/valuations', valuationData )
    .then (response => { 
      const { valuationId: valuationId, data } = response.data;
      setValuationId(valuationId);
      dataToProcess = forecastedFinancialData.map((item, index) => ({...item, valuationId:valuationId, forecastedId:valuationId + index.toString(), companyId:companyData.symbol})) 
      // map and save each period (year) forecasted....
        dataToProcess.map ( (currElement, index)=> {
          const dataFetch = dataToProcess[index]
          // console.log(currElement);// esta ok
          // console.log(dataToProcess[currElement]);
          // console.log(dataToProcess[index]);  // igual a currElement


          // Object.keys(dataToProcess[currElement]).forEach( (key) => {
          //   forecastedData[key] = dataToProcess[currElement].key
          // });
          // console.log(forecastedData);
          postForecastedFinancials({ axiosInstance: valuationsWebApi, method: 'POST', url: '/forecasted', 
          requestConfig: { 
            data:{ dataFetch }
          }}, forecastedSucessCallback, errorCallback);
          // forecastedData = {}
        })

      // Object.keys(dataToProcess).forEach( (key) => {   // key es el nombre del key
      //   postForecastedFinancials({ axiosInstance: valuationsWebApi, method: 'POST', url: '/forecasted', 
      //   requestConfig: { 
      //     key : values [key] 
      //   }}, forecastedSucessCallback, errorCallback);
      // })


      // for ( let i = 0 ; i < dataToProcess.length; i++){
      //   postForecastedFinancials({ axiosInstance: valuationsWebApi, method: 'POST', url: '/forecasted', 
      //       requestConfig: { 
      //         Object.keys(dataToProcess[i]).forEach( (key) => {
      //           key : values [key] 
      //         })

            
      //       }}, forecastedSucessCallback, errorCallback);
      // }

      // dataToProcess.map ((currElement)=> 
      //   {
      //     postForecastedFinancials({ axiosInstance: valuationsWebApi, method: 'POST', url: '/forecasted', 
      //       requestConfig: { 
      //         valuationId: currElement.valuationId,
      //         forecastedId: currElement.forecastedId,
      //         companyId: currElement.companyId,
      //         year:currElement.year, 
      //         period:currElement.period, 
      //         totalRevenue:currElement.totalRevenue, 
      //         costOfRevenue: currElement.costOfRevenue, 
      //         grossProfit: currElement.grossProfit, 
      //         grossProfitPercent:currElement.grossProfitPercent, 
      //         operatingExpenses: currElement.operatingExpenses, 
      //         depreciation: currElement.depreciation, 
      //         interestExpense: currElement.interestExpense, 
      //         other: currElement.other, 
      //         incomeBeforeTax: currElement.incomeBeforeTax, 
      //         incomeTaxExpense: currElement.incomeTaxExpense,
      //         netIncome: currElement.netIncome, 
      //         ebit: currElement.ebit, 
      //         capitalExpenditures: currElement.capitalExpenditures,
      //         cash: currElement.cash, 
      //         shortLongTermDebt:currElement.shortLongTermDebt, 
      //         longTermDebt:currElement.longTermDebt, 
      //         workingCapitalChanges:currElement.workingCapitalChanges, 
      //         cashFlow:currElement.cashFlow, 
      //         discountedCashFlow:currElement.discountedCashFlow
      //       }}, forecastedSucessCallback, errorCallback);
      //     console.log(currElement);  
      //   }  
      // );
      // dataToProcess.map ((currElement)=>
      //   api.post('/forecasted', currElement )
      //   .then (response => { 
      //   })
      //   .catch (function (err){
      //     errorCallback("There was an error in the server access. Valuation was not saved. Please try later");
          // if (err.response) {
          //   const errorMsg = Object.values(err.response.data);
          //   errorCallback("There was an error in the database access. Valuation was not saved. Please try later");
          // } else if (err.request) {
          //     errorCallback("There was an error in the server access. Valuation was not saved. Please try later");
          //   } else {
          //       errorCallback("There was an unexpected error in the server. Valuation was not saved. Please try later");
          //     }
        // }));

        // se tem problema nao grava...deleta valuation gravado, como fazer rollback?
        successCallback();
      })
    .catch (function (err){
      if (err.response) {
        const errorMsg = Object.values(err.response.data); // ver onde gravar a info..localStorage?
        errorCallback("There was an error in the database access. Valuation was not saved. Please try later.");
      } else if (err.request) {
          errorCallback("There was an error in the server access. Valuation was not saved. Please try later.");
        } else {
          console.log(err)
            errorCallback("There was an unexpected error in the server. Valuation was not saved. Please try later.");
          }
    });
  }

  return { saveValuation }
}