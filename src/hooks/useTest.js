import React, { useState, useEffect } from 'react';
import useAxios from './useAxios';
import api from '../services/api';
import valuationsWebApi from '../services/valuationsWebApi';

export default function useTest () {
  
  function saveValuation(companyData, assumptions, calculatedCostOfCapital, valuation, setValuation, forecastedFinancialData, successCallback, errorCallback){ 
    const userId = "martincsl"; // colocar userId 
    const companyId = companyData.symbol;
    const { revenueGrowth, marginTarget, opexGrowth, interestGrowth, otherGrowth, taxRate, capexGrowth, nwcGrowth, perpetualGrowthRate, cashFlowDiscretePeriod, companyBeta, riskFreeReturn, marketReturn, debtTotalRatio, costOfDebt, published, publishedDate} = assumptions
    const { costOfEquity, costOfCapital} = calculatedCostOfCapital
    const { cashFlowAvgGrowth, sumOfCashFlowPresentValue, perpetuityValue, perpetuityPresentValue, enterpriseValue, cash, debt, equityValue, sharesOutstanding, targetStockPrice, marketCap } = valuation;
    // Note: Does not includes valuationId (that will be generated by the backend...)
    const valuationData = { userId, companyId, cashFlowAvgGrowth, sumOfCashFlowPresentValue, perpetuityValue, perpetuityPresentValue, enterpriseValue, cash, debt, equityValue, sharesOutstanding, targetStockPrice, marketCap, revenueGrowth, marginTarget, opexGrowth, interestGrowth, otherGrowth, taxRate, capexGrowth, nwcGrowth, perpetualGrowthRate, cashFlowDiscretePeriod, companyBeta, riskFreeReturn, marketReturn, debtTotalRatio, costOfDebt, costOfEquity, costOfCapital, published, publishedDate } ;
    let dataToProcess = []; 
    
    api.post('/valuations', valuationData )
    .then (response => { 
      const { valuationId: valuationId, data } = response.data;
      setValuation (prevState => ({...prevState, valuationId: valuationId}))
      dataToProcess = forecastedFinancialData.map((item, index) => ({...item, valuationId:valuationId, forecastedId:valuationId + index.toString(), companyId:companyData.symbol})) 
      
      // map and save each period (year) forecasted....
      dataToProcess.map ((currElement)=> (
        api.post('/forecasted', currElement )
        .then (response => { 
        })
        .catch (function (err){
          if (err.response) {
            const errorMsg = Object.values(err.response.data);
            errorCallback("There was an error in the database access. Valuation was not saved. Please try later");
          } else if (err.request) {
              errorCallback("There was an error in the server access. Valuation was not saved. Please try later");
            } else {
                errorCallback("There was an unexpected error in the server. Valuation was not saved. Please try later");
              }
        })));
        successCallback();
    })
    .catch (function (err){
      if (err.response) {
        const errorMsg = Object.values(err.response.data); // ver onde gravar a info..localStorage?
        errorCallback("There was an error in the database access. Valuation was not saved. Please try later.");
      } else if (err.request) {
          errorCallback("There was an error in the server access. Valuation was not saved. Please try later.");
        } else {
          console.log(err)
            errorCallback("There was an unexpected error in the server. Valuation was not saved. Please try later.");
          }
    });
  }

  function publishValuation (valuation, successCallback, errorCallback) {
    const { valuationId } = valuation;
    const valuationData = { valuationId, published:"all" }; // Pasar published:"all" como parametro....
    api.put('/publication', valuationData )
    .then (response => {
      if (response.status == 200){
        successCallback();
			}	else {
        errorCallback("Action not authorized for this user");
      }
    })
    .catch (function (err){
      if (err.response) {
        const errorMsg = Object.values(err.response.data); // ver onde gravar a info..localStorage?
        errorCallback("There was an error in the database access. Valuation was not published. Please try later.");
      } else if (err.request) {
          errorCallback("There was an error in the server access. Valuation was not published. Please try later.");
        } else {
            errorCallback("There was an unexpected error in the server. Valuation was not published. Please try later.");
          }
    });
  }

  function deleteValuation (valuationId, successCallback, errorCallback) {

    //fetchData(api.delete (`valuations/${valuationId}`,{ headers : { Authorization: "martincsl",}}),successCallback, errorCallback)

    api.delete (`valuations/${valuationId}`,{ headers : { Authorization: "martincsl",}})
    .then ( response => {
      const deletedId = response.data;
			if (response.status == 200){
        successCallback();
			}	else {
        errorCallback("Action not authorized for this user");
      }
    })
    .catch (function (err){
      console.log(err)
      if (err.response) {
        const errorMsg = Object.values(err.response.data); // ver onde gravar a info..localStorage?
        errorCallback("There was an error in the database access. Valuation was not deleted. Please try later.");
      } else if (err.request) {
          errorCallback("There was an error in the server access. Valuation was not deleted. Please try later.");
        } else {
            errorCallback("There was an unexpected error in the server. Valuation was not deleted. Please try later.");
          }
    });
  }

  return { saveValuation, publishValuation, deleteValuation }
}